import 'package:flutter/material.dart';
import '../models/income_expense_entry.dart';
// import '../models/credit_entry.dart'; // Will use Receivable from ReceivableService
import '../models/receivable.dart'; // Added for ReceivableService
import '../models/sale.dart'; // Added for AccountingService.getSalesHistory
import '../constants/app_constants.dart';
import '../services/accounting_service.dart'; // Changed
import '../services/product_service.dart'; // Added
import '../services/receivable_service.dart'; // Added
import '../services/service_locator.dart'; // Added
import 'income_expense_details_page.dart';
// import 'package:shared_preferences/shared_preferences.dart'; // Direct use removed
import 'dart:convert'; // Still needed for some model conversions if any
import 'package:intl/intl.dart';

class IncomeExpenseBalancePage extends StatefulWidget {
  // final StorageService storageService; // Removed

  const IncomeExpenseBalancePage({
    Key? key,
    // required this.storageService, // Removed
  }) : super(key: key);

  @override
  State<IncomeExpenseBalancePage> createState() => _IncomeExpenseBalancePageState();
}

class _IncomeExpenseBalancePageState extends State<IncomeExpenseBalancePage> {
  late AccountingService _accountingService; // Added
  late ProductService _productService; // Added
  late ReceivableService _receivableService; // Added

  List<IncomeExpenseEntry> _entries = []; // This might be populated from _accountingService.getIncomeExpenseEntries()
  bool _isLoading = true;
  Map<IncomeExpenseCategory, double> _categoryTotals = {};
  Map<String, double> _dailyIncome = {};
  Map<String, double> _dailyExpense = {};

  @override
  void initState() {
    super.initState();
    _accountingService = getIt<AccountingService>(); // Added
    _productService = getIt<ProductService>(); // Added
    _receivableService = getIt<ReceivableService>(); // Added
    _loadData();
  }

  Future<void> _loadData() async {
    setState(() => _isLoading = true);
    try {
      // Fetch all income/expense entries, including auto-generated ones
      _entries = await _accountingService.getIncomeExpenseEntries();
      
      // Calculate category totals from these entries
      _calculateTotals(); // This will populate _categoryTotals

      // The _dailyIncome and _dailyExpense maps were used for something specific,
      // let's see if we can reproduce or simplify.
      // For now, let's clear them as their source data changed.
      _dailyIncome = {};
      _dailyExpense = {};

      // Example: Populate _dailyIncome and _dailyExpense from _entries if needed for other parts of UI
      // This assumes 'gunlukGelir' and 'gunlukGider' categories store daily aggregated amounts.
      for (var entry in _entries) {
        final dateStr = DateFormat('yyyy-MM-dd').format(entry.date);
        if (entry.category == IncomeExpenseCategory.gunlukGelir.name && entry.type == EntryType.gelir.name) {
          _dailyIncome[dateStr] = (_dailyIncome[dateStr] ?? 0) + entry.amount;
        } else if (entry.category == IncomeExpenseCategory.gunlukGider.name && entry.type == EntryType.gider.name) {
          _dailyExpense[dateStr] = (_dailyExpense[dateStr] ?? 0) + entry.amount;
        }
        // Handle other types of expenses/income contributing to daily totals if necessary
      }

      // Trigger auto-update of generated entries (like daily summary, stock value)
      await _updateAutoGeneratedData(); // This will fetch fresh data and update/create entries

      // Reload entries again after auto-update to reflect changes
      _entries = await _accountingService.getIncomeExpenseEntries();
      _calculateTotals(); // Recalculate totals with potentially new/updated entries

      setState(() {
        _isLoading = false;
      });
    } catch (e) {
      print('Veri yükleme hatası: $e');
      setState(() => _isLoading = false);
      _showError('Veriler yüklenirken bir hata oluştu: $e');
    }
  }

  Future<void> _updateAutoGeneratedData() async {
    try {
      final salesHistory = await _accountingService.getSalesHistory(); // List<Sale>
      final products = await _productService.getProducts(); // List<Product>
      final receivables = await _receivableService.getReceivables(); // List<Receivable>
      // final creditEntries = await _getCreditEntries(); // Replaced by receivables

      final today = DateTime.now();
      final todayString = DateFormat('yyyy-MM-dd').format(today);

      double totalIncomeToday = 0;
      double totalCostToday = 0;

      // Calculate income and cost from today's sales
      for (var sale in salesHistory) {
        if (DateFormat('yyyy-MM-dd').format(sale.date) == todayString) {
          totalIncomeToday += sale.totalAmount;
          totalCostToday += sale.items.fold(0, (sum, item) => sum + (item.product.costPrice * item.quantity));
        }
      }

      final totalStockValue = products.fold(0.0, (sum, product) => 
        sum + (product.finalCost * product.quantity) // Assuming finalCost is purchase/cost price
      );

      final totalActiveReceivables = receivables.fold(0.0, (sum, receivable) =>
        sum + (receivable.isPaid ? 0 : receivable.amount)
      );
      
      // Mevcut otomatik kayıtları al
      final existingEntries = await _accountingService.getIncomeExpenseEntries();
      final autoEntries = existingEntries.where((e) => e.isAutoGenerated).toList();

      final updatedAutoEntries = [
        _updateOrCreateAutoEntry(
          autoEntries,
          'daily_income_${today.toString().split(' ')[0]}',
          'gelir', // EntryType.gelir ile eşleşecek
          IncomeExpenseCategory.gunlukGelir.name,
          'Günlük Toplam Tahsilat (${today.day}.${today.month}.${today.year})',
          totalIncomeToday,
          today,
        ),
        _updateOrCreateAutoEntry(
          autoEntries,
          'daily_expense_$todayString',
          EntryType.gider.name,
          IncomeExpenseCategory.gunlukGider.name,
          'Günlük Toplam Maliyet (${today.day}.${today.month}.${today.year})',
          totalCostToday,
          today,
        ),
        _updateOrCreateAutoEntry(
          autoEntries,
          'stock_value_$todayString', // Changed ID to be more specific
          EntryType.mevcut.name,
          IncomeExpenseCategory.stok.name,
          'Mevcut Stok Değeri',
          totalStockValue,
          today,
        ),
        _updateOrCreateAutoEntry(
          autoEntries,
          'active_receivables_$todayString', // Changed ID
          EntryType.mevcut.name,
          IncomeExpenseCategory.alacak.name,
          'Toplam Alacak (Ödenmemiş)',
          totalActiveReceivables, // Only non-paid receivables
          today,
        ),
      ];

      // Save logic: Delete old auto entries for today, then add new ones.
      // Or, update existing ones and add new ones if not present.
      // For simplicity, let's assume _saveAllEntries in AccountingService can handle this.
      // We need to ensure AccountingService has a way to save/update multiple entries,
      // especially for auto-generated ones.

      // For now, let's try to update or add each entry.
      for (var entry in updatedAutoEntries) {
        final existing = autoEntries.any((e) => e.id == entry.id);
        if (existing) {
          await _accountingService.updateIncomeExpenseEntry(entry);
        } else {
          await _accountingService.addIncomeExpenseEntry(entry);
        }
      }
      // Note: This doesn't remove outdated auto-generated entries from previous days if their IDs change daily.
      // A more robust system for managing auto-generated entries might be needed in AccountingService.

    } catch (e) {
      print('Otomatik veri güncelleme hatası: $e');
      // rethrow; // Decide if this should halt execution or just log
    }
  }

  // _getCreditEntries is removed as ReceivableService is used directly

  // _saveAllEntries is removed, using AccountingService's methods

  IncomeExpenseEntry _updateOrCreateAutoEntry(
    List<IncomeExpenseEntry> existingEntries,
    String id,
    String type,
    String category,
    String description,
    double amount,
    DateTime date,
  ) {
    // Enum adlarını düzgün ayarlayalım
    final entryType = EntryType.values.firstWhere(
      (e) => e.name == type,
      orElse: () => EntryType.gelir,
    );
    
    // Find existing entry by ID
    IncomeExpenseEntry? existingEntry;
    try {
      existingEntry = existingEntries.firstWhere((e) => e.id == id);
    } catch (e) {
      // Not found
    }

    if (existingEntry != null) {
      // Update existing entry
      return IncomeExpenseEntry(
        id: existingEntry.id,
        type: type, // Use passed type string
        category: category, // Use passed category string
        description: description,
        amount: amount,
        date: date,
        isAutoGenerated: true,
      );
    } else {
      // Create new entry
      return IncomeExpenseEntry(
        id: id, // Use passed id
        type: type, // Use passed type string
        category: category, // Use passed category string
        description: description,
        amount: amount,
        date: date,
        isAutoGenerated: true,
      );
    }
  }

  void _calculateTotals() {
    _categoryTotals.clear(); // Reset totals
    // Initialize all categories with 0.0
    for (var catEnum in IncomeExpenseCategory.values) {
      _categoryTotals[catEnum] = 0.0;
    }

    for (var entry in _entries) {
      // Find the enum value corresponding to the string name
      IncomeExpenseCategory? currentCategoryEnum;
      try {
        currentCategoryEnum = IncomeExpenseCategory.values.firstWhere((catEnum) => catEnum.name == entry.category);
      } catch(e) {
        // Category string from entry doesn't match any enum name
        print("Warning: Unknown category name '${entry.category}' in entry ID ${entry.id}");
        continue;
      }

      if (_categoryTotals.containsKey(currentCategoryEnum)) {
        _categoryTotals[currentCategoryEnum] = (_categoryTotals[currentCategoryEnum] ?? 0) + entry.amount;
      } else {
        // This case should not be reached if all enums are initialized above
        _categoryTotals[currentCategoryEnum] = entry.amount;
      }
    }
  }

  void _showError(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: AppColors.error,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Bilanço'),
        backgroundColor: AppColors.primary,
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadData,
            tooltip: 'Yenile',
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Padding(
              padding: const EdgeInsets.all(16.0),
              child: GridView.count(
                crossAxisCount: MediaQuery.of(context).size.width > 600 ? 2 : 1,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
                childAspectRatio: 1.7,
                children: [
                  _buildBalanceCard(
                    context,
                    title: 'Gelirler',
                    color: Colors.green.shade100,
                    icon: Icons.trending_up,
                    iconColor: Colors.green,
                    categories: [
                      IncomeExpenseCategory.sabitGelir,
                      IncomeExpenseCategory.gunlukGelir,
                    ],
                  ),
                  _buildBalanceCard(
                    context,
                    title: 'Giderler',
                    color: Colors.red.shade100,
                    icon: Icons.trending_down,
                    iconColor: Colors.red,
                    categories: [
                      IncomeExpenseCategory.sabitGider,
                      IncomeExpenseCategory.gunlukGider,
                    ],
                  ),
                  _buildBalanceCard(
                    context,
                    title: 'Mevcutlar',
                    color: Colors.blue.shade100,
                    icon: Icons.account_balance_wallet,
                    iconColor: Colors.blue,
                    categories: [
                      IncomeExpenseCategory.nakit,
                      IncomeExpenseCategory.alacak,
                      IncomeExpenseCategory.stok,
                    ],
                  ),
                  _buildBalanceCard(
                    context,
                    title: 'Borçlar',
                    color: Colors.orange.shade100,
                    icon: Icons.warning,
                    iconColor: Colors.orange,
                    categories: [
                      IncomeExpenseCategory.bankaBorcu,
                      IncomeExpenseCategory.toptanciBorcu,
                      IncomeExpenseCategory.tlBorcu,
                      IncomeExpenseCategory.dovizBorcu,
                      IncomeExpenseCategory.emtiaBorcu,
                    ],
                  ),
                ],
              ),
            ),
    );
  }

  Widget _buildBalanceCard(
    BuildContext context, {
    required String title,
    required Color color,
    required IconData icon,
    required Color iconColor,
    required List<IncomeExpenseCategory> categories,
  }) {
    final total = categories.fold(0.0, (sum, category) => sum + (_categoryTotals[category] ?? 0));
    final entries = _entries.where((e) => categories.contains(e.category)).toList();

    return Card(
      color: color,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      elevation: 4,
      child: Stack(
        children: [
          Padding(
            padding: const EdgeInsets.all(20.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(icon, color: iconColor, size: 32),
                    const SizedBox(width: 12),
                    Text(title, style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: iconColor)),
                  ],
                ),
                const SizedBox(height: 16),
                Text('${total.toStringAsFixed(2)} TL', style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold, color: iconColor)),
                const SizedBox(height: 12),
                Expanded(
                  child: ListView.builder(
                    shrinkWrap: true,
                    itemCount: categories.length,
                    itemBuilder: (context, index) {
                      final category = categories[index];
                      final categoryTotal = _categoryTotals[category] ?? 0;
                      final categoryEntries = entries.where((e) => e.category == category.name).toList();
                      return Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Text(
                                _getCategoryLabel(category),
                                style: TextStyle(fontWeight: FontWeight.bold),
                              ),
                              Text('${categoryTotal.toStringAsFixed(2)} TL'),
                            ],
                          ),
                          if (categoryEntries.isNotEmpty)
                            ...categoryEntries.map((e) => Padding(
                              padding: const EdgeInsets.only(left: 8, top: 4),
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                children: [
                                  Expanded(
                                    child: Text(
                                      e.description,
                                      style: TextStyle(fontSize: 12),
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                  ),
                                  Text(
                                    '${e.amount.toStringAsFixed(2)} TL',
                                    style: TextStyle(fontSize: 12),
                                  ),
                                ],
                              ),
                            )),
                          const SizedBox(height: 8),
                        ],
                      );
                    },
                  ),
                ),
              ],
            ),
          ),
          // Detaylar butonu sağ alt köşede
          Positioned(
            bottom: 8,
            right: 8,
            child: ElevatedButton.icon(
              style: ElevatedButton.styleFrom(
                backgroundColor: iconColor.withOpacity(0.9),
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                elevation: 2,
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              ),
              icon: const Icon(Icons.info_outline),
              label: const Text('Detaylar'),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => IncomeExpenseDetailsPage(
                      type: _getTypeByTitle(title), // This maps title to EntryType enum
                      // entries: entries, // Pass the filtered entries for this card
                      // storageService: widget.storageService, // Service is no longer passed directly
                      // The details page will also need to be refactored to use services from getIt
                    ),
                  ),
                ).then((_) => _loadData()); // Reload data when returning from details page
              },
            ),
          ),
        ],
      ),
    );
  }

  String _getCategoryLabel(IncomeExpenseCategory category) {
    switch (category) {
      case IncomeExpenseCategory.sabitGelir:
        return 'Sabit Gelirler';
      case IncomeExpenseCategory.gunlukGelir:
        return 'Günlük Gelirler';
      case IncomeExpenseCategory.sabitGider:
        return 'Sabit Giderler';
      case IncomeExpenseCategory.gunlukGider:
        return 'Günlük Giderler';
      case IncomeExpenseCategory.nakit:
        return 'Eldeki Nakit';
      case IncomeExpenseCategory.alacak:
        return 'Alacaklar';
      case IncomeExpenseCategory.stok:
        return 'Toplam Stok';
      case IncomeExpenseCategory.bankaBorcu:
        return 'Banka Borcu';
      case IncomeExpenseCategory.toptanciBorcu:
        return 'Toptancı Borcu';
      case IncomeExpenseCategory.tlBorcu:
        return 'TL ile Borç';
      case IncomeExpenseCategory.dovizBorcu:
        return 'Döviz Borcu';
      case IncomeExpenseCategory.emtiaBorcu:
        return 'Emtia Borcu';
    }
  }

  EntryType _getTypeByTitle(String title) {
    switch (title) {
      case 'Gelirler':
        return EntryType.gelir;
      case 'Giderler':
        return EntryType.gider;
      case 'Mevcutlar':
        return EntryType.mevcut;
      case 'Borçlar':
        return EntryType.borc;
      default:
        return EntryType.gelir;
    }
  }
} 